/********************************************************/
/* Tema - Robô Sumô                                     */
/* Programação: Abaixo um exemplo de código que         */
/* controlará o robô a disputa de sumô. É utilizado dois*/
/* módulos sensores de obstáculo IR para detectar a     */
/* borda da arena, um módulo sensor ultrassônico para   */
/* detectar o adversário e a ponte H para fazer o       */
/* controle dos motores DC.                             */
/* Links para obtenção da biblioteca.                   */
/*                                                      */
/* http://librarymanager/All#minimalist#Ultrasonic      */
/* https://github.com/ErickSimoes/Ultrasonic            */
/* Biblioteca Ultrasonic by Erick Simões                */
/*                                                      */
/********************************************************/

/* Inclui a biblioteca para controle do sensor          */
/* ultrassônico.                                        */
#include <Ultrasonic.h>

/* Definições dos pinos IN1 a IN4 da ponte H.           */
/* Para controlar a velocidade dos motores, esses pinos */
/* deverão ser conectados em portas com o recurso PWM.  */
#define IN1 10 // Porta PWM ~10
#define IN2 9  // Porta PWM ~9
#define IN3 6  // Porta PWM ~6
#define IN4 5  // Porta PWM ~5

/* Definimos os pinos do sensor ultrassônico.           */
#define Pino_Trig 12
#define Pino_Echo 11

/* Define os pinos para os sensores IR                  */
#define Pino_Sensor_Dianteiro 3
#define Pino_Sensor_Traseiro 2

/* Criamos um objeto de controle para o ultrassônico.   */
Ultrasonic ultrasonic(Pino_Trig, Pino_Echo);
/* Declaração de variáveis:                             */
/* Variável "distancia" armazenará a distância lida     */
/* pelo Sensor Ultrassônico;                            */
/* Variáveis "IR_Dianteiro" e "IR_Traseiro" armazenarão */
/* a leitura dos Sensores Infravermelho;                */
/* Variáveis "Vel_Ataque" e "Vel_Padrao" definirão as   */
/* velocidades de movimento do robô;                    */
/* Variável "tempo" define o tempo de delay nas funções.*/
int distancia, IR_Dianteiro, IR_Traseiro;
int Vel_Ataque = 255, Vel_Padrao = 120, distancia_ataque = 15;

/* Criando as funções de controle dos motores.          */

/* Função fára as leituras dos sensores.               */
void ler_sensores() {
  distancia = ultrasonic.read();
  IR_Dianteiro = digitalRead(Pino_Sensor_Dianteiro);
  IR_Traseiro = digitalRead(Pino_Sensor_Traseiro);
}

/* Move para frente.                                    */
void Frente(int Velocidade) {
  /* Motor A */
  analogWrite(IN1, Velocidade);
  analogWrite(IN2, 0);
  /* Motor B */
  analogWrite(IN3, Velocidade);
  analogWrite(IN4, 0);
}

/* Move para trás.                                      */
void Re(int Velocidade) {
  /* Motor A */
  analogWrite(IN1, 0);
  analogWrite(IN2, Velocidade);
  /* Motor B */
  analogWrite(IN3, 0);
  analogWrite(IN4, Velocidade);
}

/* Giro no sentido horário.                             */
void GiroHorario(int Velocidade) {
  /* Motor A */
  analogWrite(IN1, Velocidade);
  analogWrite(IN2, 0);
  /* Motor B */
  analogWrite(IN3, 0);
  analogWrite(IN4, Velocidade);
}

/* Giro no sentido anti-horário.                        */
void GiroAntiHorario(int Velocidade) {
  /* Motor A */
  analogWrite(IN1, 0);
  analogWrite(IN2, Velocidade);
  /* Motor B */
  analogWrite(IN3, Velocidade);
  analogWrite(IN4, 0);
}

/* Para o chassi.                                       */
void Pare() {
  /* Motor A */
  analogWrite(IN1, 0);
  analogWrite(IN2, 0);
  /* Motor B */
  analogWrite(IN3, 0);
  analogWrite(IN4, 0);
}

/* Função parar manobrar o robô.                       */
void Manobre() {
  if (random(1, 3) == 1) {
    GiroAntiHorario(100);
  } else {
    GiroHorario(100);
  }
  delay(250);
}

void setup() {
  /* Configura os pinos dos sensores IR como entradas   */
  pinMode(Pino_Sensor_Dianteiro, INPUT);
  pinMode(Pino_Sensor_Traseiro, INPUT);
  delay(3000); /* Aguarda 3 segundos para iniciar       */
}

void loop() {
  /* Chama a função criada para a leitura dos sensores. */
  ler_sensores();
  /* Se o sensor dianteiro detectar a linha, faça...    */
  if (IR_Dianteiro == 1) {
    Pare();
    Re(Vel_Padrao);
    Pare();
    Manobre();
    Pare();
  }
  /* Se o sensor traseiro detectar a linha, faça...     */
  if (IR_Traseiro == 1) {
    Pare();
    Frente(Vel_Ataque);
    delay(500);
  }
  /* Se o sensor ultassônico detectar o adversário,    */
  /* faça...                                           */
  if (distancia <= distancia_ataque) {
    /*  Enquanto o sensor dianteiro não chegar até a   */
    /* linha, faça...                                  */
    while (IR_Dianteiro == 0) {
      Frente(Vel_Ataque);
      /* Atualiza as informações dos sensores.         */
      ler_sensores();
    }
  }
  /* Chama a função que move o robô par frente.        */
  Frente(Vel_Padrao);
}
