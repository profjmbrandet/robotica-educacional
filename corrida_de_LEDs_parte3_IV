/* Função que desenha o carro 2 com comprimento em função do número de voltas. */
void desenhar_carro2(void) {

/* Seleciona a cor do carro 2 com base no valor de Cor_P2. */
  switch (Cor_P2) {

    case 1: /* Vermelho. */
      for (int i = 0; i <= n_voltas_P2; i++) {
        pista.setPixelColor(((word)dist2 % N_LEDs) + i, pista.Color(255, 0, 0)); /* Aciona os LEDs atualizando as posições. */ 
      }
      break;

    case 2: /* Verde. */
      for (int i = 0; i <= n_voltas_P2; i++) {
        pista.setPixelColor(((word)dist2 % N_LEDs) + i, pista.Color(0, 255, 0)); /* Aciona os LEDs atualizando as posições. */ 
      }
      break;

    case 3: /* Azul . */
      for (int i = 0; i <= n_voltas_P2; i++) {
        pista.setPixelColor(((word)dist2 % N_LEDs) + i, pista.Color(0, 0, 255)); /* Aciona os LEDs atualizando as posições. */ 
      }
      break;

    case 4:  /* Amarelo. */
      for (int i = 0; i <= n_voltas_P2; i++) {
        pista.setPixelColor(((word)dist2 % N_LEDs) + i, pista.Color(255, 255, 0)); /* Aciona os LEDs atualizando as posições. */ 
      }
      break;

    case 5:  /* Ciano. */
      for (int i = 0; i <= n_voltas_P2; i++) {
        pista.setPixelColor(((word)dist2 % N_LEDs) + i, pista.Color(0, 255, 255)); /* Aciona os LEDs atualizando as posições. */ 
      }
      break;
      
    case 6:  /* Magenta. */
      for (int i = 0; i <= n_voltas_P2; i++) {
        pista.setPixelColor(((word)dist2 % N_LEDs) + i, pista.Color(255, 0, 255)); /* Aciona os LEDs atualizando as posições. */ 
      }
      break;
  }
}
